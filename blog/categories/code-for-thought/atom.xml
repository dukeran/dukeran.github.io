<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[ code-for-thought | TechReg]]></title>
  <link href="http://dukeran.github.io/blog/categories/code-for-thought/atom.xml" rel="self"/>
  <link href="http://dukeran.github.io/"/>
  <updated>2016-05-31T22:12:37-04:00</updated>
  <id>http://dukeran.github.io/</id>
  <author>
    <name><![CDATA[Kerrie Durham]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Setting Up Jekyll on Github Project Page]]></title>
    <link href="http://dukeran.github.io/blog/2016/05/31/setting-up-jekyll-on-github-project-page/"/>
    <updated>2016-05-31T22:08:58-04:00</updated>
    <id>http://dukeran.github.io/blog/2016/05/31/setting-up-jekyll-on-github-project-page</id>
    <content type="html"><![CDATA[<h3>How to set up pre-made Jekyll theme to your created Github Project Pages</h3>

<p>Like most projects I begin, I immediately faced programming trouble and a daunting challenge that made me second-guess my original enthusiasm.</p>

<!--more-->


<p>You&rsquo;re given the following:</p>

<p>def stringy(size)
 (insert your code here)
end</p>

<p>I first thought about how to approach the problem in the most simple way possible. How could I break it down so that the string starting at one?</p>

<p>my first thought was to start at: &lsquo;&rsquo;&lsquo;base = &ldquo;1&rdquo;&rsquo;&lsquo;&rsquo; and go from there. I recalled the first method I internalized;</p>

<p>(1..size).each do |number|</p>

<p>because size is within the parenthesis, Ruby knows that size is going to be a variable for a number. The &ldquo;number&rdquo; put into &ldquo;| |&rdquo; symbolism is giving a variable name to what is inside the parenthesis.
I figured that for every other number I would want a &ldquo;1&rdquo; and then a &ldquo;0&rdquo; so with this dichotomy I figured I could equate it to even and odds. For every odd I would assign a &ldquo;1&rdquo; value and for every even I would assign a &ldquo;0&rdquo; value. Mind you, I was writing anything that came to mind and erasing and cleaning up things as I went. At this point I removed the base = &ldquo;1&rdquo; since I would be no longer needing it if my array started at 1 and I could assign a &ldquo;1&rdquo; on the 1 value.</p>

<p>after running a few tests, I came up with the following:</p>

<pre><code class="ruby">def stringy(size)
  (1..size).each do |number|
  if number.odd? 
    puts "1"
  else  
    puts "0"
  end
  end
end
puts stringy(5)
</code></pre>

<p>This did not work quite how I wanted it to:</p>

<pre><code class="ruby">1  
0  
1  
0  
1  
1...5  
</code></pre>

<p>First of all, what was with the <code>1..5</code>? I was confused and so I asked a friend. Ruby, when not given a specific task, will regurgitate as much as she can, trying to give you as much information as possible unless specified otherwise. Since nothing was specified between the end of the <code>if</code>, <code>else</code> and the <code>end</code> of the defining method, then ruby told you the parameters of what she did was between 1 and 5, hence the 1..5. Another thing to note is that Ruby gave us the 1&rsquo;s and 0&rsquo;s we were looking for, but not in a consecutive line. It turns out that ruby will print out each variable on its own line unless specifically told not to.</p>

<p>The next round I specifically told ruby to print the variables on the same line:</p>

<pre><code class="ruby">def stringy(size)
  string = ''
  size.times do |number|
    if number.even?
      string = string + '1'
    else
      string = string + '0'
    end
  end
  string
end
</code></pre>

<p>Also, what is significant about this code compared to the last code I tried is that in the first code I applied a function to the range and in the second code I used a method and applied it to a variable. For example in the first code <code>(1..size).each do |number|</code> the <code>.each</code> applies to the inclusive range, applying the function to each number in the range.
In the second code in the third line <code>size.times do |n|</code>, the <code>.times</code>  function means that the method will perform that function as many times as you specify in the <code>n</code> variable.
In this case, there isn&rsquo;t much difference between the two except that <code>.times</code> can be applied to a stand-alone variable while <code>.each</code> <em>has to</em> apply to more than one variable. It is perfectly acceptable to write <code> (1..size).each do |number|</code> in the second code on line 3 in place of what is there.</p>

<p>A few other solutions were:</p>

<pre><code class="ruby">def stringy(size)
  (1..size).map { |number| number.even? ? '0' : '1' }.join('')
end
</code></pre>

<p>In this case I learned something knew. I hadn&rsquo;t seen the <code>.map</code> function before. <code>.map</code> applies a function onto every single member of that range. The curly brackets are a shorthand for <code>do</code>/<code>end</code>, allowing the entire method to be on one line, shortening the code. The <code>?</code> is calling up the Boolean method (see previous post) and the <code>:</code> act as an OR method.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Setting Up Jekyll on Github Project Pages]]></title>
    <link href="http://dukeran.github.io/blog/2016/05/30/jekyll-github-pages/"/>
    <updated>2016-05-30T18:21:22-04:00</updated>
    <id>http://dukeran.github.io/blog/2016/05/30/jekyll-github-pages</id>
    <content type="html"><![CDATA[<h3>How to set up pre-made Jekyll theme to your created Github Project Pages</h3>

<p>Like most projects I begin, I immediately faced programming trouble and a daunting challenge that made me second-guess my original enthusiasm.</p>

<!--more-->


<p>You&rsquo;re given the following:</p>

<p>def stringy(size)
 (insert your code here)
end</p>

<p>I first thought about how to approach the problem in the most simple way possible. How could I break it down so that the string starting at one?</p>

<p>my first thought was to start at: &lsquo;&rsquo;&lsquo;base = &ldquo;1&rdquo;&rsquo;&lsquo;&rsquo; and go from there. I recalled the first method I internalized;</p>

<p>(1..size).each do |number|</p>

<p>because size is within the parenthesis, Ruby knows that size is going to be a variable for a number. The &ldquo;number&rdquo; put into &ldquo;| |&rdquo; symbolism is giving a variable name to what is inside the parenthesis.
I figured that for every other number I would want a &ldquo;1&rdquo; and then a &ldquo;0&rdquo; so with this dichotomy I figured I could equate it to even and odds. For every odd I would assign a &ldquo;1&rdquo; value and for every even I would assign a &ldquo;0&rdquo; value. Mind you, I was writing anything that came to mind and erasing and cleaning up things as I went. At this point I removed the base = &ldquo;1&rdquo; since I would be no longer needing it if my array started at 1 and I could assign a &ldquo;1&rdquo; on the 1 value.</p>

<p>after running a few tests, I came up with the following:</p>

<pre><code class="ruby">def stringy(size)
  (1..size).each do |number|
  if number.odd? 
    puts "1"
  else  
    puts "0"
  end
  end
end
puts stringy(5)
</code></pre>

<p>This did not work quite how I wanted it to:</p>

<pre><code class="ruby">1  
0  
1  
0  
1  
1...5  
</code></pre>

<p>First of all, what was with the <code>1..5</code>? I was confused and so I asked a friend. Ruby, when not given a specific task, will regurgitate as much as she can, trying to give you as much information as possible unless specified otherwise. Since nothing was specified between the end of the <code>if</code>, <code>else</code> and the <code>end</code> of the defining method, then ruby told you the parameters of what she did was between 1 and 5, hence the 1..5. Another thing to note is that Ruby gave us the 1&rsquo;s and 0&rsquo;s we were looking for, but not in a consecutive line. It turns out that ruby will print out each variable on its own line unless specifically told not to.</p>

<p>The next round I specifically told ruby to print the variables on the same line:</p>

<pre><code class="ruby">def stringy(size)
  string = ''
  size.times do |number|
    if number.even?
      string = string + '1'
    else
      string = string + '0'
    end
  end
  string
end
</code></pre>

<p>Also, what is significant about this code compared to the last code I tried is that in the first code I applied a function to the range and in the second code I used a method and applied it to a variable. For example in the first code <code>(1..size).each do |number|</code> the <code>.each</code> applies to the inclusive range, applying the function to each number in the range.
In the second code in the third line <code>size.times do |n|</code>, the <code>.times</code>  function means that the method will perform that function as many times as you specify in the <code>n</code> variable.
In this case, there isn&rsquo;t much difference between the two except that <code>.times</code> can be applied to a stand-alone variable while <code>.each</code> <em>has to</em> apply to more than one variable. It is perfectly acceptable to write <code> (1..size).each do |number|</code> in the second code on line 3 in place of what is there.</p>

<p>A few other solutions were:</p>

<pre><code class="ruby">def stringy(size)
  (1..size).map { |number| number.even? ? '0' : '1' }.join('')
end
</code></pre>

<p>In this case I learned something knew. I hadn&rsquo;t seen the <code>.map</code> function before. <code>.map</code> applies a function onto every single member of that range. The curly brackets are a shorthand for <code>do</code>/<code>end</code>, allowing the entire method to be on one line, shortening the code. The <code>?</code> is calling up the Boolean method (see previous post) and the <code>:</code> act as an OR method.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning About Variable Scope]]></title>
    <link href="http://dukeran.github.io/blog/2016/03/02/variables/"/>
    <updated>2016-03-02T17:21:22-05:00</updated>
    <id>http://dukeran.github.io/blog/2016/03/02/variables</id>
    <content type="html"><![CDATA[<h3>Hardcore Parcour</h3>

<p>After going through three tutorial books on Ruby, Sinatra, and Ruby on Rails (one each respectively) I still struggled with my first kata from Code Wars.
Code Wars (give a brief description)</p>

<p>The name of the kata is Stringy Strings and it has very straightforward instructions;</p>

<blockquote><p>write me a function stringy that takes a size and returns a string of alternating &lsquo;1s&rsquo; and &lsquo;0s&rsquo;.</p>

<p>the string should start with a 1.</p>

<p>a string with size 6 should return :&lsquo;101010&rsquo;.</p>

<p>with size 4 should return : &lsquo;1010&rsquo;.</p>

<p>with size 12 should return : &lsquo;101010101010&rsquo;.</p>

<p>The size will always be positive and will only use whole numbers</p></blockquote>

<p>I have to admit, I was at quite a loss - a feeling that was incredibly frustrating.</p>

<!--more-->


<p>You&rsquo;re given the following:</p>

<p>def stringy(size)
 (insert your code here)
end</p>

<p>I first thought about how to approach the problem in the most simple way possible. How could I break it down so that the string starting at one?</p>

<p>my first thought was to start at: &lsquo;&rsquo;&lsquo;base = &ldquo;1&rdquo;&rsquo;&lsquo;&rsquo; and go from there. I recalled the first method I internalized;</p>

<p>(1..size).each do |number|</p>

<p>because size is within the parenthesis, Ruby knows that size is going to be a variable for a number. The &ldquo;number&rdquo; put into &ldquo;| |&rdquo; symbolism is giving a variable name to what is inside the parenthesis.
I figured that for every other number I would want a &ldquo;1&rdquo; and then a &ldquo;0&rdquo; so with this dichotomy I figured I could equate it to even and odds. For every odd I would assign a &ldquo;1&rdquo; value and for every even I would assign a &ldquo;0&rdquo; value. Mind you, I was writing anything that came to mind and erasing and cleaning up things as I went. At this point I removed the base = &ldquo;1&rdquo; since I would be no longer needing it if my array started at 1 and I could assign a &ldquo;1&rdquo; on the 1 value.</p>

<p>after running a few tests, I came up with the following:</p>

<pre><code class="ruby">def stringy(size)
  (1..size).each do |number|
  if number.odd? 
    puts "1"
  else  
    puts "0"
  end
  end
end
puts stringy(5)
</code></pre>

<p>This did not work quite how I wanted it to:</p>

<pre><code class="ruby">1  
0  
1  
0  
1  
1...5  
</code></pre>

<p>First of all, what was with the <code>1..5</code>? I was confused and so I asked a friend. Ruby, when not given a specific task, will regurgitate as much as she can, trying to give you as much information as possible unless specified otherwise. Since nothing was specified between the end of the <code>if</code>, <code>else</code> and the <code>end</code> of the defining method, then ruby told you the parameters of what she did was between 1 and 5, hence the 1..5. Another thing to note is that Ruby gave us the 1&rsquo;s and 0&rsquo;s we were looking for, but not in a consecutive line. It turns out that ruby will print out each variable on its own line unless specifically told not to.</p>

<p>The next round I specifically told ruby to print the variables on the same line:</p>

<pre><code class="ruby">def stringy(size)
  string = ''
  size.times do |number|
    if number.even?
      string = string + '1'
    else
      string = string + '0'
    end
  end
  string
end
</code></pre>

<p>Also, what is significant about this code compared to the last code I tried is that in the first code I applied a function to the range and in the second code I used a method and applied it to a variable. For example in the first code <code>(1..size).each do |number|</code> the <code>.each</code> applies to the inclusive range, applying the function to each number in the range.
In the second code in the third line <code>size.times do |n|</code>, the <code>.times</code>  function means that the method will perform that function as many times as you specify in the <code>n</code> variable.
In this case, there isn&rsquo;t much difference between the two except that <code>.times</code> can be applied to a stand-alone variable while <code>.each</code> <em>has to</em> apply to more than one variable. It is perfectly acceptable to write <code> (1..size).each do |number|</code> in the second code on line 3 in place of what is there.</p>

<p>A few other solutions were:</p>

<pre><code class="ruby">def stringy(size)
  (1..size).map { |number| number.even? ? '0' : '1' }.join('')
end
</code></pre>

<p>In this case I learned something knew. I hadn&rsquo;t seen the <code>.map</code> function before. <code>.map</code> applies a function onto every single member of that range. The curly brackets are a shorthand for <code>do</code>/<code>end</code>, allowing the entire method to be on one line, shortening the code. The <code>?</code> is calling up the Boolean method (see previous post) and the <code>:</code> act as an OR method.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Boolean Values]]></title>
    <link href="http://dukeran.github.io/blog/2016/02/07/boolean-values/"/>
    <updated>2016-02-07T00:44:33-05:00</updated>
    <id>http://dukeran.github.io/blog/2016/02/07/boolean-values</id>
    <content type="html"><![CDATA[<h4>Fundamentals of Ones and Zeros</h4>

<p>Thanks to a friend of mine, I&rsquo;ve recently been doing a lot of Kata on <strong>Codewars</strong>. If you&rsquo;ve never done katas on Codewars before, I would <em>highly, highly, highly</em> recommend it. It&rsquo;s a great site where your competitive nature can get the best of you as you compete with other friends for &lsquo;honor&rsquo;. There are eight levels of difficulty and each kata is a creative coding problem that you solve for honor points. The beginner&rsquo;s level, level 8, is a good overview of incredibly basic coding concepts. Once you enter your solution you are able to see how others solved the same kata.</p>

<p>&ndash;> <a href="http://www.codewars.com">http://www.codewars.com</a></p>

<p>My username is <strong>dukeran</strong> if you want to add me!</p>

<h5><em>special note: if the same solution was posted by more than two people then I will not site the code.</em></h5>

<p>After going through Chris Pine&rsquo;s <em>Learn to Program</em>  book, here is the solution I came up with:</p>

<pre><code class="ruby">    def boolean_to_string(b)
        if b == true 
    "true"
        else b == false
    "false"
  end
end
</code></pre>

<p>This is a straightforward code which works just fine but doesn&rsquo;t utilize the fundamental concept of Boolean values.</p>

<!--more-->


<p>It wasn&rsquo;t until I saw other answers and started doing some research that I learned more about it. It started when I saw the most popular answer and was instantly confused:</p>

<pre><code class="ruby ">def boolean_to_string(b)
  b ? "true" : "false"
end
</code></pre>

<p>At first I cocked my head and then wiped my glasses. First of all, what does the <code>?</code> mean? and why don&rsquo;t you have to specifically tell ruby that <code>if b = true...</code> How does ruby automatically know to test for true and false?</p>

<p>The program above may seem painfully simple to any programmer worth their salt but to a newbie in the field, it was a confusionfest - especially when it comes to Ruby. I find that as a Linguistics major with no background in coding, many expert programmers assume that these fundamentals are pure common sense. This is not the case for most non-programmers and I want to break everything down step by step.</p>

<h5>George Boole, the Foundation Layer</h5>

<p>Let&rsquo;s start with George Boole because I always find coding processes/fundamentals easier to swallow when the human element is added to make it a bit more personal. George Boole (1815-1864) was an Eglishman who is credited with laying the foundations for the informational age - the period that marked the shift from Industrial Revolution to what we have today with an economy based on information computerization. Without much formal teaching, he taught himeslf algebra and calculus using mathematics books. He became a prominent member of society and began publishing his own academic articles, lending insight into linear differential equations, invariant theory, and symbolic logic. Also, I learned that Boole is famous for using the term &ldquo;Universe of Discourse&rdquo; which is an important and fundamental concept to the linguistic study of pragmatics and semantics!!
In an attempt to systematize and categorize Airstotelian logic in order to be ableto extend its range of application, Boole created the beginnings of  Boolean logic.</p>

<h5>So What is the Difference Between Boolean logic and Aristotelian Logic?</h5>

<p>Aristotelian logic, or term logic, begins with the fundamental assumption that propositions are composed of two terms. The term is a part of speech which carries no truth value but instead represents something such as &ldquo;man&rdquo; or &ldquo;cat&rdquo;. The proposition is what consists of two terms, the &ldquo;affirmed&rdquo; or &ldquo;denied&rdquo; and the subject which is capable of true or false. Finally, the syllogism is the inference, or conclusion, that one can make from the premises.
Propositions can be either <strong>Universal and affirmative</strong>, <strong>Particular and affirmative</strong>, <strong>Universal and negative</strong>, or *Particular and negative**.</p>

<p>Fun Fact: Mary Everest Boole, his wife, was also a self-taught mathematician and was a strong advocate for teaching children Science at a young age and to make mathematics fun for the young. She often helped George Boole on his academic papers and attended conferences with him as well, unheard of for women of the time. She supported the idea that arithmetic was more anthropomorphic instead of purely abstract.</p>

<p>need to have a question mark to denote the boolean theory!!</p>
]]></content>
  </entry>
  
</feed>
